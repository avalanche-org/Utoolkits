/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/bcgen.js":
/*!****************************!*\
  !*** ./assets/js/bcgen.js ***!
  \****************************/
/***/ (() => {

eval("/**\n * barcode  generator  module  \n * Authors  :  Mamadou Diop   2020-2021 \n *             Mame Astou Gassama  2022   \n *             Umar  Ba            2022  \n * copyright (C) 2022, Avanlanche BioSoftware Corporation   \n */\n\n\nlet {log} = console  \n\nconst  _=document   \nlet  { \n    masks, paragraph_advice , n_min , prefix , npages ,  \n    bcgenbtn , bctable , suggest , header_title_applied_mask,bcprinter, \n    bc_colorpicker\n\n    } = htmlVirtual_DOM_select  = { \n    masks  :  [..._.querySelectorAll(\"div > a.item\")].splice(-3) , \n    paragraph_advice  :  _.querySelectorAll(\"p\")[0] ,  \n    n_min  : _.querySelector(\"#n_min\") , prefix  : _.querySelector(\"#prefix\") , npages:_.querySelector(\"#npages\") ,\n    bcgenbtn :_.querySelector(\"#btn_generer_codebar\") , \n    bctable  :_.querySelector(\"#tbl_barcode\") , \n    suggest  :_.querySelector(\"#suggested\") , \n    header_title_applied_mask  : _.querySelectorAll(\"h1\")[0],  \n    bcprinter: _.querySelector(\"#print\"), \n    bc_colorpicker : _.querySelector(\"input[type='color']\")  \n} \n\nconst  JBC_SETTING = { \n    format:\"code128\",\n    width : 1.3,\n    height: 29.1,\n    fontSize:15,\n    margin:10,\n    textPosition:\"top\" \n} \nlet height = 0 \nlet width  = 0 \nlet barcode_rgba_color = []   \n\nconst bcgen_logical  = { \n\n    paragraph_advice_change  : data  => { \n        const lookup_patern = /\\d+/g \n        let  text = paragraph_advice.textContent \n        data = data.split(\"x\") \n        const [ h , w ]  =data  \n        let  digit_match  =  text.match(lookup_patern) \n        text = text.replace(digit_match[0],h) \n        text = text.replace(digit_match[1],w) \n        height = parseInt(h) \n        width  = parseInt(w) \n        log (\"applyed  mask \" ,  height  , width )  \n        header_title_applied_mask.textContent= `${height}x${width}` \n        paragraph_advice.textContent = text  \n    } , \n    \n    \"#_active_mask\" : () =>   masks.filter(mask =>  mask.classList.contains(\"active\")).at(0) ,  \n    masks_apply :() => {  \n        \n        masks.map(mask =>  { \n            mask.addEventListener(\"click\" , evt  => { \n                evt.preventDefault()  \n                if ( !mask.classList.contains(\"active\")) \n                {\n                    bcgen_logical[\"#_active_mask\"]().classList.remove(\"active\") \n                    mask.classList.add(\"active\")  \n                    const  mask_params  =  mask.attributes.alt.nodeValue  \n                    bcgen_logical.paragraph_advice_change(mask_params)  \n                }\n            }) \n        })\n    },  \n    \n    /**\n     * calculate_total_page  : \n     * depending  on used mask  it calcute how many page  it should generate  \n     * @param  {string  or  integer }  - number of page requested     \n     * @return { integer }             - number of total pages  needed   \n     */\n    calculate_total_page :  npages_requested =>  height * parseInt(npages_requested) ,  \n\n    bcmatrix_customizer  : id => {  \n        const td   = _.createElement(\"td\")\n        td.style.maginTop = \"10px\"  \n        let svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\")\n\n        svg.setAttribute(\"stroke\", `rgba(${barcode_rgba_color.at(0)}, ${barcode_rgba_color.at(1)}, ${barcode_rgba_color.at(2)}, 0.5)`)\n        svg.setAttribute(\"id\" , `barcode${id}`)   \n        td.appendChild(svg)  \n        \n        return td ; \n    }, \n    \n    build_bcmatrix    :  ( height ,  width )  =>  {\n\n        let tr_construction  =  \"\" \n        for (let row = 0;  row < height  ; row++) \n        {\n            table_row = _.createElement(\"tr\")  \n            for (let column= 0 ; column <  width ;  column++ )  \n            {\n                let identifier  = column.toString() + row.toString()  \n                table_row.appendChild(bcgen_logical.bcmatrix_customizer(identifier)) \n\n            }\n    \n            bctable.appendChild(table_row)  \n        } \n    } ,   \n    \n    bcmatrix_inscribe_barcode  : ( height , width ,  customizable_logic_callback )  => {\n\n        nmin = parseInt(n_min.value.trim())\n        \n        for (let row = 0;  row < height  ; row++) \n        {\n            for (let column= 0 ; column <  width ;  column++ )  \n            {\n                let identifier  = column.toString() + row.toString() \n                JsBarcode(\"#barcode\"+identifier ,  prefix.value+nmin.toString()   , JBC_SETTING)  \n            } \n            /*\n            if  (customizable_logic_callback)  \n            {\n                customizable_logic_callback(nmin)  \n            }else*/   \n            nmin =  nmin +1  \n\n        }  \n        \n        if  (nmin) \n        {\n            if ( bcgen_logical.startwith(nmin)) \n            {\n                _.querySelector(\"#btnFillNext\").addEventListener(\"click\" ,  evt => {  \n                    n_min.value =  nmin  \n                })\n            }\n        }\n    },\n\n    startwith :  new_nmin_serie  => { \n        if   ( [...suggest.childNodes].length == 1 )  \n        {\n             suggest.removeChild([...suggest.childNodes].at(0))   \n        }\n\n        let btn_suggest  =  _.createElement(\"button\") \n        btn_suggest.setAttribute(\"id\" , \"btnFillNext\") \n        btn_suggest.style.fontSize=\"1.5em\"\n        btn_suggest.style.fontWeight=400\n        btn_suggest.style.color=\"#4183c4!important\"\n        btn_suggest.style.maginBottom=\"10px\"\n        btn_suggest.setAttribute(\"class\" , \"ui basic button\")  \n\n        btn_suggest.innerHTML = `next<i class=\"right arrow icon\"> </i> &nbsp;${new_nmin_serie}`\n        \n        suggest.appendChild(btn_suggest)   \n        return  true  \n    } , \n\n    barcode_generator :  () => { \n        bcgenbtn.addEventListener(\"click\", evt =>   {\n            bctable.innertHTML=\"\"  \n            tpages  = bcgen_logical.calculate_total_page(npages.value) \n            \n            bcgen_logical.build_bcmatrix(height, width)   \n            \n            bcgen_logical.bcmatrix_inscribe_barcode(height ,  width ,  false )  \n        }) \n    }  , \n\n    preload : ()  =>  {   \n        const dimension_property =  bcgen_logical[\"#_active_mask\"]() \n        bcgen_logical.paragraph_advice_change(dimension_property.attributes.alt.nodeValue)  \n        barcode_rgba_color  = bcgen_logical[\"#convert2decimalebase\"](bc_colorpicker.value) \n        \n    } , \n\n    bcgen_printer  :   () => {  \n\n        bcprinter.addEventListener(\"click\", evt  =>{ \n            $(\"#tbl_barcode\").printElement({ \n                overrideElementCSS:[\n                    \"assets/style/barcode.css?3.0\",\n                    {\n                        href:\"assets/style/barcode.css?3.0\", \n                        media:\"print\"\n                    }\n                ]\n            })\n        }) \n\n    } ,  \n\n    main : () =>  { \n        \n        bcgen_logical.preload()  \n        bcgen_logical.masks_apply()  \n        bcgen_logical.barcode_generator()\n        bcgen_logical.bcgen_printer() \n        bcgen_logical.bcgen_colorstyle() \n        \n\n    },  \n\n    \"#convert2decimalebase\" : hex_base => { \n        const base  =  hex_base.slice(1).match(/.{1,2}/g) \n        let rgb_code = base.map(b=>  `0x${b}`)\n                           .map(hex2dec => parseInt(hex2dec))  \n        return rgb_code\n        \n        \n    } , \n    bcgen_colorstyle : ()  => {  \n        \n        bc_colorpicker.addEventListener(\"change\" , evt =>  { \n            barcode_rgba_color  = bcgen_logical[\"#convert2decimalebase\"](evt.target.value) \n            \n             \n        }) \n    } \n}\n\n\nbcgen_logical.main() \n\n\n//# sourceURL=webpack://barcodegenerator/./assets/js/bcgen.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/js/bcgen.js"]();
/******/ 	
/******/ })()
;