diff --git a/CHarm/src/CHarm.py b/CHarm/src/CHarm.py
index a282c62..f522f3d 100755
--- a/CHarm/src/CHarm.py
+++ b/CHarm/src/CHarm.py
@@ -11,6 +11,15 @@ sys = __import__("sys")
 pd  = __import__("pandas")  
 arg = __import__("argparse") 
 
+#TODO  : Put this  in config file  
+
+# Needed variables  to build  requested  data frame  
+
+required_vars = [
+            'nom_patient','date_prelevement','no_ipd',
+            'no_terrain','age_annees','adresse',
+            'sexe','telphone'
+            ]
 
 def CHARM__  ( charm  , spreadsheet  )  :
     charm._xlsx  = spreadsheet 
@@ -31,12 +40,32 @@ def headers (charm )  :
 def xlsx (charm ) : 
     return  charm._xlsx
 
-def select (charm , colname_target  : str  , build_frame : bool = True  ) : 
+def select (charm , colname_target  : str  ,df_index_repeat_frequency_filter : int =None ,  condition  :str  = ">=") -> pd.core.frame.DataFrame: 
+    """
+    """
+    allowed_condition_string_statement  :   list = [  ">=" ,"<" , ">" , "<=" ]  
+    assert allowed_condition_string_statement.__contains__(condition)   
+    
     if  not charm.headers.__contains__(colname_target)  :
         raise  ValueError(f"{colname_target} is not defined")  
 
-    return charm._xlsx[colname_target].value_counts().to_frame()  
-    #return charm._xlsx[colname_target] 
+    freq_frame =  charm._xlsx[colname_target].value_counts().to_frame()  
+     
+    if  not df_index_repeat_frequency_filter  : 
+        return freq_frame  
+    
+    talble_index_frame =[ 
+            freq_frame[freq_frame[colname_target].__ge__(df_index_repeat_frequency_filter)]  
+            ,freq_frame[freq_frame[colname_target].__lt__(df_index_repeat_frequency_filter)]  
+            ,freq_frame[freq_frame[colname_target].__gt__(df_index_repeat_frequency_filter)]  
+            ,freq_frame[freq_frame[colname_target].__le__(df_index_repeat_frequency_filter)]  
+            ]  
+    cond_pos  =  allowed_condition_string_statement.index(condition)  
+    index_frame = talble_index_frame[cond_pos]   
+
+    return  pd.DataFrame( {colname_target : index_frame.index })  
+
+
 
 def build_subdf ( charm ,  *args )  : 
     args =  set(args) 
@@ -45,6 +74,7 @@ def build_subdf ( charm ,  *args )  :
     assert  allowed_header & args
     return  charm._xlsx[list(args)]  
 
+
 _Mcharm  :dict =  {  
         "__init__"  :  CHARM__ , 
         "automake_df"   :  automake_df  ,
@@ -57,10 +87,12 @@ _Mcharm  :dict =  {
 
 CHarm =  type("charm" ,(), _Mcharm)  
 
-def main  ()  : 
+def main  ()  :  
+
     stdarg = arg.ArgumentParser() 
     stdarg.add_argument("-f" , "--file" , help="The spreadsheet file target ")  
-    
+    #TODO  :  add  more argument  that permit to show individual column name  
+
     argv = stdarg.parse_args()
     
     sprdsheat  = argv.file  
@@ -70,36 +102,30 @@ def main  ()  :
     filename =  sprdsheat.split("/")[-1]  
     
     charm =  CHarm(sprdsheat) 
-     
-    """
-    Create  a dataframe  that contain the frequency of  each epid  
-    """
-    epids  =  charm.select("no_terrain")  
-    print(f"{epids}") 
-    epids_frequency_gt2 = epids[epids["no_terrain"].__ge__(2)]    
-    #epids_frequency_gt2  = epids["no_terrain"] 
+
+    epids  =  charm.select("no_terrain" ,  2  , ">=") 
     
-    print(f"@--> {epids.index}") 
-     
-    required_vars = [
-            'nom_patient','date_prelevement','no_ipd',
-            'no_terrain','age_annees','adresse',
-            'sexe','telphone'
-            ]
+    #epids_frequency_gt2 = epids[epids["no_terrain"].__ge__(2)]   
+    #epids = pd.DataFrame({"no_terrain": epids_frequency_gt2.index } )  
 
+    # create a new datafram based  on  @required_vars  
     df   =  charm.build_subdf(*required_vars)
-    print(f"subdata frame  -> {df}")
 
+    
+    def build_rowless_df  ( df ,  colname , list_of_values  )  : 
+        chunck  = [] 
+        for index in list_of_values  :  
+            row_df = df[df[colname]==index][required_vars]  
+            chunck.__iadd__([row_df])  
+        
+        return  pd.concat(chunck, axis=0)   
+        
     def CheckEpid(base_epidsdf  , worker_df , colnames ) : 
         data_list = []
-        print(f"epids index  {base_epidsdf.index}") 
-        for row in list(base_epidsdf.index) : 
-            df1 = worker_df[worker_df[colnames] == row][required_vars]  
-            data_list.__iadd__([df1]) 
-            
-        return  pd.concat(data_list ,axis =0 )  
+        epids  = list(base_epidsdf[colnames])  
+        return  build_rowless_df(worker_df , colnames , epids)  
 
-    data  = CheckEpid(epids_frequency_gt2 ,df , "no_terrain")
+    data  = CheckEpid(epids ,df , "no_terrain")
 
     ages_collection   = [] 
     for age  in data["age_annees"]  :  
@@ -111,18 +137,17 @@ def main  ()  :
         except  :  ...   
 
     data["age_annees"] =  ages_collection 
-    groupby = data.groupby('no_terrain',sort = True).std() 
-    g = groupby[groupby['age_annees'].__gt__(1)]
-    data_list = []
-    for ind in list(g.index):
-        dat = df[df['no_terrain']==ind][required_vars]
-        data_list.__iadd__([dat])
+    groupby = data.groupby('no_terrain',sort = True).std()   
     
-    data_final = pd.concat(data_list,axis = 0)
+    #ages = groupby[groupby['age_annees'].__gt__(1)]
+    #ages  = charm.select("age_annees" , -1,  ">")  
+
+    ages = groupby['age_annees'] 
+    
+    data_final =  build_rowless_df ( df ,"no_terrain" , list(ages.index) )  
+
     output_filename=f"CH@{filename[:-4]}.xlsx"
     
-    data_final= data_final.fillna("Missing") 
-    data_final.style.applymap(lambda x: "background-color:'yellow';color: red" if pd.isna(x) else '')
     data_final.to_excel(output_filename)
       
       
